# -*- coding: utf-8 -*-
"""ex3.ipynb のコピー

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AJ-fXpVhwEXJPCT9FVAh4xYiZIfZ_AN2

# 第3回本課題

[English version](https://colab.research.google.com/drive/1bfZeUhNdo5TxyLi6t6lx4BgxUfuVHvPB)

## Ex3-1. 単語頻度辞書の作成

辞書 `dw` は、文字列（文書のタイトルを表します）をキー、
文字列（文書を構成する単語を表します）のリストを値とします。
`dw` を受け取って、単語 $w$ をキー、`dw` が持つリスト全体における $w$ の頻度（すなわち出現回数）を値とする辞書を返す関数
`compute_word_frequency(dw)` を定義してください。たとえば、
`dw` が

`{'t1': ['I', 'have', 'book'], 't2': ['I', 'student'], 't3': ['I', 'go', 'book', 'store']}`

であるとき、
`compute_word_frequency(dw)` は、

`{'I': 3, 'have': 1, 'book': 2, 'student': 1, 'go': 1, 'store': 1}`

を返します。

`dw` が持つリストの長さの総和におおよそ線形で比例する時間で計算してください。
"""

##########################################################
##  <[ ex3-1-compute_word_frequency ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

def compute_word_frequency(dw):
    keys = list(dw.keys())
    values = list(dw.values())
    print(keys)
    print(values)
    for i in values:
      for j in len(i):

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

assert compute_word_frequency({'t1': ['I', 'have', 'book'], 't2': ['I', 'student'], 't3': ['I', 'go', 'book', 'store']}) == {'I': 3, 'have': 1, 'book': 2, 'student': 1, 'go': 1, 'store': 1}
assert compute_word_frequency({'k1': ['a', 'b', 'a', 'c'], 'k2': ['b', 'c', 'b', 'd']}) == {'a': 2, 'b': 3, 'c': 2, 'd': 1}

