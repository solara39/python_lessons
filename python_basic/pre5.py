# -*- coding: utf-8 -*-
"""pre5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qYWKaMW0rSqKs-1eg3mqv8l8a6EibDB

# 第5回予習課題

[English version](https://colab.research.google.com/drive/1dActPLoSs-jJHg9SsleuHjL_xkXn6x2O)

## Pre5-1. モジュールの作成と利用

教材5-2のモジュール `factorial` を作成し、それを利用して組み合わせの数
$\displaystyle _m{\rm C}_n = \frac{m!}{n!\,(m-n)!}$ を計算する関数
`comb(m,n)` を定義してください。
結果は整数になるようにしてください。

factorial.py を作成する一つの方法は、Colaboratoryで factorial.ipynb という名前のノートブックを作成し、
`fact` の定義からなるセルを挿入して、ファイルメニューの「.py をダウンロード」を選択するものです。
[このfactorial.ipynb](https://colab.research.google.com/github/utokyo-ipp/annex/blob/master/assignments/pre5/factorial.ipynb)を利用しても構いません。

factorial.py を作成したら、Colaboratoryでは次のセルを実行して factorial.py を読み込んでください。
"""

from google.colab import files
uploaded = files.upload()

##########################################################
##  <[ pre5-1-comb ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

import factorial

def comb(m,n):
  return factorial.fact(m) // (factorial.fact(n) * factorial.fact(m - n))

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

assert comb(10,5) == 252
assert comb(100,50) == 100891344545564193334812497256

"""## Pre5-2. コサイン類似度

2つのベクトルの類似性を表す指標として標準的に用いられるものの1つが、それらがなす角 $\theta$ の余弦値 $\cos \theta$ です。
それらのベクトルの方向が近ければ近いほど、$\cos \theta$ は $1$ に近づいていきます。
一般に、これをコサイン類似度と呼びます。

さて、2つの1次元配列`x`と`y`を取って、それらのコサイン類似度を返す関数`cos_sim(x, y)`を定義してください。
ただし、for文やwhile文の反復処理は用いずに、`numpy`モジュールが提供する関数や配列のメソッドのみを使って定義してください。
また、`x`と`y`の要素数は等しく、0より大きいと仮定してかまいません。

2つのベクトル $\overrightarrow{a} = [a_1, \ldots, a_n]$と$\overrightarrow{b} = [b_1, \ldots, b_n]$ の成す角$\theta$としたとき、次の関係が成り立つことを利用してかまいません。

$\cos \theta = \frac{\sum_{i=1}^n a_i b_i}{\sqrt{\sum_{i=1}^{n} a_i^2} \sqrt{\sum_{i=1}^n b_i^2}}$
"""

##########################################################
##  <[ pre5-2-cos_sim ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

import numpy as np

def cos_sim(x, y):
  multi_sum = sum(x * y)
  a = np.sqrt(sum(x ** 2))
  b = np.sqrt(sum(y ** 2))
  return multi_sum / (a * b)

import numpy as np

def cos_sim2(x, y):
  multi = np.dot(x, y)
  norm_x = np.linalg.norm(x)
  norm_y = np.linalg.norm(y)
  return multi / (norm_x * norm_y)

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

import scipy.spatial.distance

# テストケース生成
def gen_testcase(n):
    np.random.seed(0)
    x = np.random.rand(n)
    y = np.random.rand(n)
    ans = 1 - scipy.spatial.distance.cosine(x,y)
    return (x, y, ans)

# テストケース実行
for i in range(3):
    x, y, ans = gen_testcase(10**i)
    assert round(ans - cos_sim2(x,y), 10) == 0

