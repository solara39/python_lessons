# -*- coding: utf-8 -*-
"""pre2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXGoIySyJ3V_K976EbYp_ceaVQG7Hhkn

# 第2回予習課題

[English version](https://colab.research.google.com/drive/1y8go1m5uAOPMxxAOH-XcjCXGtmlulHaE)

## Pre2-1. 最小値と最大値の間の要素の抜き出し

同じ要素を2回以上含まない数のリスト `distincts` が与えられたとき、
`distincts` の中の最大値と最小値に挟まれた要素から成るリストを返す関数
`between_min_max(distincts)` を作成してください。
ただし、返すリストに最小値と最大値は含めます。
また、 `distincts` の中で最大値が最小値よりも先に出現する場合にも対応してください。
（いうまでもなく、返すリストの要素の順番はもとのリストと同じにします。）

以下のセルの `...` のところを書き換えて `between_min_max(distincts)` を作成してください。
"""

##########################################################
##  <[ pre2-1-between_min_max ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

def between_min_max(distincts):
  min_index = 0
  max_index = 0
  min = distincts[0]
  max = distincts[0]
  for i, x in enumerate(distincts):
    if x > max:
      max = x
      max_index = i
    if x < min:
      min = x
      min_index = i
  if min_index < max_index:
    return distincts[min_index:max_index + 1]
  else:
    return distincts[max_index: min_index + 1]

def between_min_max2(distincts):
  min_value = min(distincts)
  max_value = max(distincts)
  min_index = distincts.index(min_value)
  max_index = distincts.index(max_value)
  start = min(min_index, max_index)
  end = max(min_index, max_index)
  return distincts[start:end + 1]

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

assert between_min_max([5,3,1,4,6,2,0]) == [6,2,0]
assert between_min_max([5,3,1,4,6,2]) == [1,4,6]
assert between_min_max([5,3,1,4,2]) == [5,3,1]
assert between_min_max([1]) == [1]

assert between_min_max2([5,3,1,4,6,2,0]) == [6,2,0]
assert between_min_max2([5,3,1,4,6,2]) == [1,4,6]
assert between_min_max2([5,3,1,4,2]) == [5,3,1]
assert between_min_max2([1]) == [1]

"""## Pre2-2. 桁を増やす

0 から 9 までの数字から成る文字列 `s` と、整数 `n` が与えられたとき、
`s` の各数字に `n` を加えて 10 で割った余りから構成される文字列を返す関数 `inc_digits(s,n)` を定義してください。

たとえば、`inc_digits('12', 5)` は `'67'` という文字列を返します。
`inc_digits('457', 5)` は `'902'` を返します。
（5+5=10 を 10 で割った余りは 0、7+5=12 を 10 で割った余りは 2 です。）

数字 `c` に対して `int(c)` は対応する整数を返します。
逆に整数 `i` に対して `str(i)` は対応する文字列を返します。
"""

##########################################################
##  <[ pre2-2-inc_digits ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

def inc_digits(s,n):
  result = ''
  for i in range(len(s)):
    value = int(s[i])
    result += str((value + n) % 10)
  return result

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

assert inc_digits('12', 5) == '67'
assert inc_digits('457', 5) == '902'

