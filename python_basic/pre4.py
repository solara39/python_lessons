# -*- coding: utf-8 -*-
"""pre4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_sNrpygCB3r6-hUj8pJl_zFtiPCZ8xR
"""

##================================================
## このセルを最初に実行せよ---Run this cell first.
##================================================
!wget -P text https://raw.githubusercontent.com/UTokyo-IPP/annex/master/assignments/pre4/text/novel.txt
!wget -P text https://raw.githubusercontent.com/UTokyo-IPP/annex/master/assignments/pre4/text/preamble.md
!wget -P text https://raw.githubusercontent.com/UTokyo-IPP/annex/master/assignments/pre4/text/short.txt

"""# 第4回予習課題

[English version](https://colab.research.google.com/drive/1E4xWhyNMEFC9eCalMnPyQUSuGSEiZ28j)

## Pre4-1. 校正

入力ファイル名 `filename`、文字コード `code`、文字の対応を表す辞書 `char_mapping` を引数にとって、
`char_mapping` にしたがって入力ファイル中の文字を置換したファイルを出力する関数 `proof_text(filename, code, char_mapping)` を定義してください。
ここで、入力ファイルは `code` を使って読み込み、出力ファイルは入力ファイル名の先頭に `'new-'` を連結した名前として `code` を使って書き出すこと。
`char_mapping` の値となる文字は、`char_mapping` のキーには含まれないと仮定してよい。
"""

##########################################################
##  <[ pre4-1-proof_text ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

def proof_text(filename, code, char_mapping):
    with open(filename, 'r', encoding = code) as f:
      content = f.read()
      for i, char in char_mapping.items():
        content = content.replace(i, char)
    with open("new-" + filename, 'w', encoding = code) as f:
      f.write(content)

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

with open('konnichiha.txt', 'w', encoding='utf-8') as f:
    f.write('こんにちは、元気ですか。\nさようなら。\n')
try:
    proof_text('konnichiha.txt', 'utf-8', {'、':'，', '。':'．'})
    with open('new-konnichiha.txt', 'r', encoding='utf-8') as f:
        assert f.read() == 'こんにちは，元気ですか．\nさようなら．\n'
finally:
    def cleanup():
        import os, contextlib
        with contextlib.suppress(IOError):
            os.remove('konnichiha.txt')
            os.remove('new-konnichiha.txt')
    cleanup()

"""## Pre4-2. ディレクトリ中のファイル読み込み

ディレクトリ `dirpath` とその中にあるテキストファイルの名前 `filename` を受け取って、それを文字コード `code` で開いたときの文字数を返す `text_file_len(dirpath, filename, code)` を定義せよ。ただし、`dirpath` は、Colab起動時のワーキングディレクトリからの相対パスである。また、解答セルは、次の制約を満たさなければならない。

* `text_file_len` の中でしかファイル操作をしてはならない。
* ワーキングディレクトリを変更してはならない。
"""

##########################################################
##  <[ pre4-2-text_file_len ]> 解答セル (Answer cell)
##  このセルの複製・削除を禁ず (Neither copy nor delete this cell)
##########################################################

QUESTION_EXISTS = False # 質問がある場合は True に変えて，このセル内のコメントとして質問を記述してください
                        # Change to True if you have questions, and describe them as comments in this cell

def text_file_len(dirpath, filename, code):
  cnt = 0
  with open(dirpath + '/' + filename, 'r', encoding = code) as f:
    content = f.read()
    for i in content:
      cnt += 1
  return cnt

"""提出前に以下のテストセルを実行し、エラーがでないことを確認してください。"""

assert text_file_len('text', 'short.txt', 'utf-8') == 5
assert text_file_len('text', 'novel.txt', 'utf-8') == 234
assert text_file_len('text', 'preamble.md', 'euc-jp') == 663
with open('empty.txt', 'w'):
    pass
try:
    assert text_file_len('.', 'empty.txt', 'utf-8') == 0
finally:
    def cleanup():
        import os, contextlib
        with contextlib.suppress(IOError):
            os.remove('empty.txt')
    cleanup()

